View(simulation)
library(tidyverse)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
for(i in range(1:1000)){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(t(table))
row<-table[2,]
colnames(row)<-c('X1', 'X2', 'X3')
simulation[i,]<-rbind(simulation,row)
}
library(tidyverse)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
x<-1:1000
for(i in x){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(t(table))
row<-table[2,]
colnames(row)<-c('X1', 'X2', 'X3')
simulation[i,]<-rbind(simulation,row)
}
library(tidyverse)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
x<-1:1000
for(i in x){
samp[i] <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp[i])
table <- data.frame(t(table))
row<-table[2,]
colnames(row)<-c('X1', 'X2', 'X3')
simulation[i,]<-rbind(simulation,row)
}
library(tidyverse)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
x<-1
repeat{
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(t(table))
row<-table[2,]
colnames(row)<-c('X1', 'X2', 'X3')
simulation<-rbind(simulation,row)
x = x+1
if(x=1000){
library(tidyverse)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
x<-1
repeat{
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(t(table))
row<-table[2,]
colnames(row)<-c('X1', 'X2', 'X3')
simulation<-rbind(simulation,row)
x = x+1
if(x==1000){
break
}
}
View(simulation)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(t(table))
View(table)
table<-table(samp)
table<-t(table(samp))
table<-table(samp)
table<-t(table)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(table)
row<-table[,2]
colnames(row)<-c('X1', 'X2', 'X3')
row<-data.frame(table[,2])
colnames(row)<-c('X1', 'X2', 'X3')
View(row)
row<-data.frame(t(table[,2]))
colnames(row)<-c('X1', 'X2', 'X3')
simulation<-rbind(simulation,row)
library(tidyverse)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
x<-1
repeat{
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(table)
row<-data.frame(t(table[,2]))
colnames(row)<-c('X1', 'X2', 'X3')
simulation<-rbind(simulation,row)
x = x+1
if(x==1001){
break
}
}
library(tidyverse)
simulation<-data.frame(matrix(ncol = 3, nrow = 0))
colnames(simulation) <- c('X1', 'X2', 'X3')
x<-1
repeat{
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
table<-table(samp)
table <- data.frame(table)
row<-data.frame(t(table[,2]))
colnames(row)<-c('X1', 'X2', 'X3')
simulation<-rbind(simulation,row)
x = x+1
if(x==1001){
break
}
}
View(row)
simulation<replicate(10000,sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE))
one.dice <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
replicate(samp.function,10000)
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function)
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function())
par(mfrow=c(2,2))
simulation<-t(simulation)
simulation<-t(simulation)
simulation$X1 <- rowSums(simulation == "X1")]
simulation<-t(simulation)
simulation<-data.frame(simulation)
simulation$X1 <- rowSums(simulation == "X1")]
simulation<-t(simulation)
simulation<-data.frame(simulation)
simulation$X1 <- rowSums(simulation == "X1")
View(simulation)
simulation<-data.frame(simulation)
simulation<-transpose(simulation)
simulation$X1 <- rowSums(simulation == "X1")
simulation<-data.frame(simulation)
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function())
View(simulation)
simulation<-data.frame(simulation)
simulation<-data.frame(simulation)
simulation<-t(simulation)
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function())
simulation<-data.frame(simulation)
simulation<-t(simulation)
simulation$X1 <- rowSums(simulation == "X1")
simulation$X2 <- rowSums(simulation == "X2")
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function())
simulation<-data.frame(simulation)
simulation<-t(simulation)
View(simulation)
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function())
simulation<-data.frame(simulation)
simulation<-transpose(simulation)
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function())
library(data.table)
simulation<-data.frame(simulation)
simulation<-transpose(simulation)
simulation$X1 <- rowSums(simulation == "X1")
simulation$X2 <- rowSums(simulation == "X2")
simulation$X3 <- rowSums(simulation == "X3")
subset<-simulation[simulation$X1 == 3 &
simulation$X2 == 4 &
simulation$X3 == 3]
subset<-simulation[simulation$X1 == 3 &
simulation$X2 == 4 &
simulation$X3 == 3,]
subset<-simulation[simulation$X1 == 3 &
simulation$X2 == 4 &
simulation$X3 == 3,]
nrow(subset)/nrow(simulation)
subset<-simulation[simulation$X1 == 3 &
simulation$X2 == 4 &
simulation$X3 == 3,]
nrow(subset)/nrow(simulation)
samp.function <- function(){
samp <- sample(c("X1","X2","X3"), size = 10, prob = c(.3,.4,.3) ,replace = TRUE)
return(samp)
}
simulation<-replicate(10000,samp.function())
library(data.table)
simulation<-data.frame(simulation)
simulation<-transpose(simulation)
simulation$X1 <- rowSums(simulation == "X1")
simulation$X2 <- rowSums(simulation == "X2")
simulation$X3 <- rowSums(simulation == "X3")
subset<-simulation[simulation$X1 == 3 &
simulation$X2 == 4 &
simulation$X3 == 3,]
nrow(subset)/nrow(simulation)
dmultinom(c(3,4,3),10,prob=c(0.3,0.4,0.3))
sim<-replicate(10000,runif(12))
View(sim)
sim<-replicate(10000,runif(12))
sim<-data.frame(sim)
simulation<-transpose(sim)
sim<-replicate(10000,runif(12))
sim<-data.frame(sim)
sim<-transpose(sim)
sim$Z <- rowSums(sim)-6
hist(sim$Z)
qqnorm(sim$Z)
mean(sim$Z)
sd(sim$Z)
mean.W = 7 + 10
var.W = (3**2 / 9) + (5**2 / 12)
mean.W
var.W
mean.W = 7 - 10
var.W = (3**2 / 9) + (5**2 / 12)
mean.W
var.W
sim.x<-replicate(10000,rnorm(9,7,3))
sim.x<-data.frame(sim.x)
sim.x<-transpose(sim.x)
sim.y<-replicate(10000,rnorm(12,10,5))
sim.y<-data.frame(sim.y)
sim.y<-transpose(sim.y)
df <- data.frame(sim.x,sim.y)
View(df)
sim.x<-replicate(10000,rnorm(9,7,3))
sim.x<-data.frame(sim.x)
sim.x<-transpose(sim.x)
sim.y<-replicate(10000,rnorm(12,10,5))
sim.y<-data.frame(sim.y)
sim.y<-transpose(sim.y)
sim.x<-replicate(10000,rnorm(9,7,3))
sim.y<-replicate(10000,rnorm(12,10,5))
```{r}
sim.x<-replicate(10000,rnorm(9,7,3))
sim.y<-replicate(10000,rnorm(12,10,5))
for(i in 1:10000){
x = rnorm(9,7,3)
y = rnorm(12,10,5)
w = mean(x) - mean(y)
W = c(W,w)
}
W = c()
for(i in 1:10000){
x = rnorm(9,7,3)
y = rnorm(12,10,5)
w = mean(x) - mean(y)
W = c(W,w)
}
W = c()
for(i in 1:10000){
x = rnorm(9,7,3)
y = rnorm(12,10,5)
w = mean(x) - mean(y)
W = c(W,w)
}
hist(W)
mean(W)
sd(W)
mean(W)
sd(W)**2
mean(W<-1.5)
W = c()
for(i in 1:10000){
x = rnorm(9,7,3)
y = rnorm(12,10,5)
w = mean(x) - mean(y)
W = c(W,w)
}
hist(W)
mean(W)
sd(W)**2
mean(W<1.5)
mean(W < -1.5)
mean(W < -1.5)
pnorm(-1.5, -3,sqrt(3.0833))
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
fish<-read.csv("FishMercury.csv")
View(fish)
hist(fish)
hist(fish$Mercury)
set.seed(100)
n = 30
N = 10000
boot <- numeric(N)
for (i in 1:N)
{
x <- sample(fish$Mercury, n, replace = TRUE)
mean.boot[i]<-mean(x)
}
set.seed(100)
n = 30
N = 10000
boot <- numeric(N)
for (i in 1:N)
{
x <- sample(fish$Mercury, n, replace = TRUE)
boot[i]<-mean(x)
}
mean(boot)
stadard.error <- sd(boot)/sqrt(N)
standard.error
standard.error <- sd(boot)/sqrt(N)
standard.error
quantile(diff.boot, c(0.025, 0.975))
quantile(boot, c(0.025, 0.975))
fish2 <- fish[-1,]
n = 30
N = 10000
boot2 <- numeric(N)
for (i in 1:N)
{
x2 <- sample(fish2, n, replace = TRUE)
boot2[i]<-mean(x2)
}
mean(boot2)
standard.error2 <- sd(boot2)/sqrt(N)
standard.error2
quantile(boot2, c(0.025, 0.975))
hist(fish2)
cereal<-read.csv("Cereals.csv")
table(cereal)
View(cereal)
xtabs(~Age + Shelf, data = cereal)
table<- xtabs(~Age + Shelf, data = cereal)
table
chisq.test(cereal$Age, cereal$Shelf)
chi.sq.result <- chisq.test(cereal$Age, cereal$Shelf)
chi.sq.result
chi.sq.result$expected
artists<-read.csv("Artists.csv")
artists<-read.csv("Artists.csv")
View(artists)
artists<-read.csv("Artists.csv")
taylor<-artists[artists$artist_name=="Taylor Swift",]
beyonce <- artists[artists$artist_name=="Beyonce",]
artists<-read.csv("Artists.csv")
taylor<-artists[artists$artist_name=="Taylor Swift",]
beyonce <- artists[artists$artist_name=="Beyoncé",]
print("Mean Liveness")
print("Taylor Swift:")
print(mean(taylor$liveness))
print('Beyonce:')
print(mean(beyonce$liveness))
library(ggplot2)
ggplot(artists, aes(x = artist_name, y = liveness, fill = artist_name)) +
geom_boxplot() +
labs(title = "Music Liveness Between Taylor Swift and Beyonce",
x = "Artist",
y = "Liveness (0 to 1")
library(ggplot2)
ggplot(artists, aes(x = artist_name, y = liveness, fill = artist_name)) +
geom_boxplot() +
labs(title = "Music Liveness of Artists",
x = "Artist",
y = "Liveness (0 to 1")
ttest(beyonce$liveness,taylor$liveness)
t.test(beyonce$liveness,taylor$liveness)
n = 100
N = 10000
ratio.boot <- numeric(N)
for (i in 1:N)
{
x <- sample(beyonce$liveness, n, replace = TRUE)
y <- sample(taylor$liveness, n, replace = TRUE)
ratio.boot[i]<-mean(x) / mean(y)
}
quantile(diff.boot, c(0.025, 0.975))
quantile(ratio.boot, c(0.025, 0.975))
observed.ratio <- mean(Beyonce$liveness)/mean(Taylor$liveness)
observed.ratio <- mean(beyonce$liveness)/mean(Taylor$liveness)
observed.ratio <- mean(beyonce$liveness)/mean(taylor$liveness)
bias <- mean(ratio.boot) - observed.ratio
bias
confidence.interval <- function(mean,z,sd,n){
LL <- mean - z * (sd/sqrt(n))
UL <- mean + z * (sd/sqrt(n))
return(LL)
return(UL)
}
confidence.interval(mean = 18.05, z = 1.645, sd = 5, n = 20)
confidence.interval <- function(mean,z,sd,n){
LL <- mean - z * (sd/sqrt(n))
UL <- mean + z * (sd/sqrt(n))
return(LL)
return(UL)
}
confidence.interval(mean = 18.05, z = 1.645, sd = 5, n = 20)
results<- confidence.interval(mean = 18.05, z = 1.645, sd = 5, n = 20)
results
confidence.interval <- function(mean,z,sd,n){
LL <- mean - z * (sd/sqrt(n))
UL <- mean + z * (sd/sqrt(n))
return(c(LL,UL))
}
confidence.interval(mean = 18.05, z = 1.645, sd = 5, n = 20)
g10<-ggplot(perf,aes(x=average_placement, y=days_between))+
geom_count()+
ggtitle("Average Placement Before Race vs. Final Race Placing")+
xlab("Days of Rest Between Races")+
ylab("Final Placing")
horses <- read.csv("../../../data/01-modified-data/horses.clean.csv")
perf <- read.csv("../../../data/01-modified-data/perf.clean.csv")
g10<-ggplot(perf,aes(x=average_placement, y=days_between))+
geom_count()+
ggtitle("Average Placement Before Race vs. Final Race Placing")+
xlab("Days of Rest Between Races")+
ylab("Final Placing")
g10
perf<- perf%>%
filter(rating < 250 & final_placing != 47 & final_placing != 99)
library(ggplot2)
library(dplyr)
g1<- ggplot(perf,aes(x=rating,y=final_placing))+geom_jitter()
g1
perf<- perf%>%
filter(rating < 250 & final_placing != 47 & final_placing != 99)
g10<-ggplot(perf,aes(x=average_placement, y=days_between))+
geom_count()+
ggtitle("Average Placement Before Race vs. Final Race Placing")+
xlab("Days of Rest Between Races")+
ylab("Final Placing")
g10
perf_rest <- perf[perf$days_between<=25,]
g11<-ggplot(perf_rest,aes(x=average_placement, y=days_between))+
geom_count()+
ggtitle("Average Placement Before Race vs. Final Race Placing")+
xlab("Days of Rest Between Races")+
ylab("Final Placing")
g11
perf_rest <- perf[perf$days_between<=15,]
g11<-ggplot(perf_rest,aes(x=average_placement, y=days_between))+
geom_count()+
ggtitle("Average Placement Before Race vs. Final Race Placing")+
xlab("Days of Rest Between Races")+
ylab("Final Placing")
g11
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(2, 2))  # Set up a 2x2 grid for multiple plots
# Plot 1: Residuals vs Fitted Values
plot(model, which = 1)
library(tidyverse)
library(data.table)
data_link <- "https://projects.fivethirtyeight.com/nfl-api/nfl_elo.csv"
nfl_data <- fread(data_link, verbose = FALSE)
# Filtering our data to only being the 2022 season and non-neutral sites
nfl.clean<-nfl_data%>%
filter(season == 2022 & neutral == 0)
# Subsetting our rows that are not from the playoffs
nfl.clean<-nfl.clean[1:266,]
# Creating difference measures
## Difference between home and away scores (target variable)
nfl.clean$score.diff <- nfl.clean$score1 - nfl.clean$score2
## Difference between pre-game home and away QB-adjusted Elo
nfl.clean$elo.adj.diff <- nfl.clean$qbelo1_pre - nfl.clean$qbelo2_pre
plot(nfl.clean$elo.adj.diff,nfl.clean$score.diff, main = "Home and Away Team Elo Rating Differential vs. Score Differential", xlab = "QB-Adjusted Elo Differential", ylab = "Score Differential")
model <- lm(score.diff ~ elo.adj.diff, data = nfl.clean)
plot(model$residuals, main = "Residuals Plot", ylab = "Residuals", xlab = "Observation Index")
par(mfrow = c(2, 2))  # Set up a 2x2 grid for multiple plots
# Plot 1: Residuals vs Fitted Values
plot(model, which = 1)
# Plot 2: Normal Q-Q Plot
plot(model, which = 2)
# Plot 3: Scale-Location (sqrt(|residuals|) vs Fitted)
plot(model, which = 3)
# Plot 4: Residuals vs Leverage
plot(model, which = 4)
# Reset the plotting parameters
par(mfrow = c(1, 1))
rm(list=ls())
setwd("C:/Users/Matthew Carswell/Documents/STIA Final Project")
knitr::opts_chunk$set(echo = TRUE)
water <- read.csv('WaterQualilty.csv')
water <- read.csv('WaterQualilty.csv')
